<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on 松溪夜谈</title><link>https://zhwjimmy.github.io/tags/go/</link><description>Recent content in go on 松溪夜谈</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 12 Feb 2023 21:38:08 +0800</lastBuildDate><atom:link href="https://zhwjimmy.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go系列文章之逃逸分析</title><link>https://zhwjimmy.github.io/post/programming/go/go-escape-analysis/</link><pubDate>Sun, 12 Feb 2023 21:38:08 +0800</pubDate><guid>https://zhwjimmy.github.io/post/programming/go/go-escape-analysis/</guid><description>什么是逃逸分析 编译阶段，分析指针动态范围的方法被称之为逃逸分析。当一个对象的指针被多个方法或线程引用时，称这个指针发生了逃逸。逃逸分析决定一个变量是分配在栈上还是堆上。</description></item><item><title>Go系列文章之数据容器</title><link>https://zhwjimmy.github.io/post/programming/go/go-data-container/</link><pubDate>Sun, 12 Feb 2023 20:55:45 +0800</pubDate><guid>https://zhwjimmy.github.io/post/programming/go/go-data-container/</guid><description>切片 type slice struct{ array unsafe.</description></item><item><title>Go系列文章之调度机制</title><link>https://zhwjimmy.github.io/post/programming/go/go-gmp/</link><pubDate>Sun, 12 Feb 2023 16:30:51 +0800</pubDate><guid>https://zhwjimmy.github.io/post/programming/go/go-gmp/</guid><description>Go调度器的由来 进程 进程是资源分配的最小单位。一个进程可以独立运行，并且拥有独立的内存空间 创建进程的开销很大，需要分配独立内存空间。虚拟内存占用几GB。 进程间的数据交互涉及到进程间通信。 线程 线程是程序执行的最小单位。它是进程内部的一个执行流，共享进程的资源，但拥有自己的寄存器和栈 线程相对进程开销小，线程占用几MB 统一进程下的线程共享虚拟内存、全局变量等数据，交换数据比进程方便 上下文切换相对开销更小 并发和并行 协程 内存在操作系统中分为两部分：内核空间和用户空间。内核空间只有内核程序可以访问；用户空间供应用程序访问。 所以线程分成两部分，内核态线程和用户态线程，用户态线程被称为协程，和内核态线程绑定执行 内核调度线程成本比较高，所以分成两部分：内核线程仍然由内核进行调研；用户态线程创建、销毁不需要系统调用，可以自行维护，切换成本小，被称为协程 协程和线程的绑定关系 N:1 一旦协程阻塞，会造成线程阻塞 1:1 M:N GMP模型 操作系统调度器调度内核线程 线程和P绑定 每个P有一个P的本地队列，存储goroutine 全局g队列 Go的启动周期 先解释下M0和G0的概念</description></item><item><title>Go系列文章之通道</title><link>https://zhwjimmy.github.io/post/programming/go/go-channel/</link><pubDate>Sat, 11 Feb 2023 20:18:04 +0800</pubDate><guid>https://zhwjimmy.github.io/post/programming/go/go-channel/</guid><description>goroutine和channel是Go并发的两大基石</description></item></channel></rss>