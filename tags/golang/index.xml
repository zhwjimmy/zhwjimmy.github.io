<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 松溪夜谈</title><link>https://zhwjimmy.github.io/tags/golang/</link><description>Recent content in golang on 松溪夜谈</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 11 Jan 2023 16:27:48 +0800</lastBuildDate><atom:link href="https://zhwjimmy.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang 底层数据结构</title><link>https://zhwjimmy.github.io/post/programming/go/go-data-structure/</link><pubDate>Wed, 11 Jan 2023 16:27:48 +0800</pubDate><guid>https://zhwjimmy.github.io/post/programming/go/go-data-structure/</guid><description>Slice 扩容 在Go语言中，当向一个slice添加元素时，如果当前slice的容量已经不足以容纳新添加的元素，那么Go语言的运行时会自动为该slice分配新的底层数组，并将原有的数据复制到新的数组中，并将新的元素添加到新的数组中。这个过程被称为&amp;quot;扩容&amp;quot;。</description></item><item><title>Golang 垃圾回收机制</title><link>https://zhwjimmy.github.io/post/programming/go/go-garbage-collection/</link><pubDate>Wed, 11 Jan 2023 15:47:08 +0800</pubDate><guid>https://zhwjimmy.github.io/post/programming/go/go-garbage-collection/</guid><description>1.3版本的标记-清除法 流程 STW暂停业务逻辑 找到可达对象，进行标记 清除不可达对象 停止STW，继续运行业务 缺点 STW，程序会出现卡顿 标记需要扫描整个heap 清除数据会产生heap碎片 1.</description></item></channel></rss>